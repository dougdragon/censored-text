{"version":3,"sources":["components/TextInput/TextInput.js","App.js","reportWebVitals.js","index.js"],"names":["TextInput","useState","textAreaValue","setTextAreaValue","isSubmitted","setIsSubmitted","transformText","originalText","replace","className","onSubmit","event","preventDefault","console","log","onChange","e","target","value","type","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAqCeA,EAlCG,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACfC,EADe,KACAC,EADA,OAEgBF,oBAAS,GAFzB,mBAEfG,EAFe,KAEFC,EAFE,KAehBC,EAAgB,SAAAC,GAEpB,OAAOA,EAAaC,QADJ,6BACqB,UAGvC,OACE,qCACE,qBAAKC,UAAU,UAAf,SACE,uBAAMC,SAnBS,SAAAC,GACnBA,EAAMC,iBACNP,GAAe,GACfF,EAAiBG,EAAcJ,IAC/BW,QAAQC,IAAR,wCAA6CZ,KAezC,UACE,gDACA,0BAAUa,SAAU,SAAAC,GAAC,OAAIb,EAAiBa,EAAEC,OAAOC,UACnD,wBAAQC,KAAK,SAAb,kBACA,wBAAQA,KAAK,QAAQC,QAhBT,WAClBjB,EAAiB,KAeX,wBAGHC,GAAeF,GAAiB,yCAAW,iCAASA,WCzB5CmB,EAJH,WACV,OAAO,cAAC,EAAD,KCOMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0b801bf2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./TextInput.css\";\n\nconst TextInput = () => {\n  const [textAreaValue, setTextAreaValue] = useState(\"\");\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setIsSubmitted(true);\n    setTextAreaValue(transformText(textAreaValue))\n    console.log(`submitting the following text ${textAreaValue}`);\n  }\n\n  const handleReset = () => {\n    setTextAreaValue(\"\");\n  }\n\n  const transformText = originalText => {\n    const myRegex = /['\"]((?:\\\\.|[^'\\\\])*)[\"']/g;\n    return originalText.replace(myRegex, \"XXXXX\");\n  }\n\n  return (\n    <>\n      <div className=\"wrapper\">\n        <form onSubmit={handleSubmit}>\n          <label>Text input:</label>\n          <textarea onChange={e => setTextAreaValue(e.target.value)} />\n          <button type=\"submit\">Save</button>\n          <button type=\"reset\" onClick={handleReset}>Reset</button>\n        </form>\n      </div>\n      {isSubmitted && textAreaValue && <p>Output: <strong>{textAreaValue}</strong></p>}\n    </>\n  );\n}\nexport default TextInput;\n","import React from \"react\";\nimport './App.css';\nimport TextInput from \"./components/TextInput/TextInput\";\n\nconst App = () => {\n  return <TextInput />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}